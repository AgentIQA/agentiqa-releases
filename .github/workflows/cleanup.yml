name: Cleanup Old Releases

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch: # Allow manual trigger

jobs:
  cleanup:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Cleanup old releases
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get all releases
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            // Sort by creation date (newest first)
            const sortedReleases = releases.data.sort((a, b) => 
              new Date(b.created_at) - new Date(a.created_at)
            );
            
            // Keep the latest 5 releases, delete the rest
            const releasesToDelete = sortedReleases.slice(5);
            
            console.log(`Found ${sortedReleases.length} total releases`);
            console.log(`Keeping latest 5 releases`);
            console.log(`Deleting ${releasesToDelete.length} old releases`);
            
            for (const release of releasesToDelete) {
              console.log(`Deleting release: ${release.tag_name} (${release.name})`);
              
              try {
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id
                });
                
                // Also delete the git tag
                try {
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `tags/${release.tag_name}`
                  });
                  console.log(`Deleted tag: ${release.tag_name}`);
                } catch (tagError) {
                  console.log(`Tag ${release.tag_name} may not exist or already deleted`);
                }
                
              } catch (error) {
                console.error(`Failed to delete release ${release.tag_name}:`, error);
              }
            }
            
            console.log('Cleanup completed');